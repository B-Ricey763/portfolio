/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { MutableRefObject, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import Book from "./Book";
import Pickup from "./Pickup";
import BombFactoryTycoon from "./overlays/BombFactoryTycoon";
import ColorChaos from "./overlays/ColorChaos";
import JavaProjects from "./overlays/JavaProjects";
import NimGameAI from "./overlays/NimGameAI";
import Speech from "./overlays/Speech";
import GeorgiaTech from "./overlays/GeorgiaTech";
import { useFrame } from "@react-three/fiber";
import { easing } from "maath";

type GLTFResult = GLTF & {
  nodes: {
    Shelf: THREE.Mesh;
    Coffee: THREE.Mesh;
    ColorChaos: THREE.Mesh;
    Desk: THREE.Mesh;
    Floor: THREE.Mesh;
    Bomb: THREE.Mesh;
    Coins: THREE.Mesh;
    GT: THREE.Mesh;
    Mic: THREE.Mesh;
    Web: THREE.Mesh;
    GraduationCap: THREE.Mesh;
  };
  materials: {
    Standard: THREE.MeshStandardMaterial;
    Shiny: THREE.MeshStandardMaterial;
  };
};

export type OverlayProps = {
  itemHeld: string;
  setItemHeld: (item: string) => void;
};

export function Desk(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/desk.glb") as GLTFResult;
  const [itemHeld, setItemHeld] = useState("");

  const bookRotOffset = new THREE.Quaternion().setFromAxisAngle(
    new THREE.Vector3(1, 0, 0),
    Math.PI / 2,
  );

  useFrame((state, delta) => {
    if (itemHeld === "") {
      easing.damp3(
        state.camera.position,
        [
          state.pointer.x,
          20 + state.pointer.y / 2,
          20 + Math.atan(state.pointer.y * 2),
        ],
        0.3,
        delta,
      );
      state.camera.lookAt(
        state.camera.position.x * 2,
        3 + state.camera.position.y * 0.5,
        -4,
      );
    }
  });
  return (
    <group {...props} dispose={null}>
      <group>
        <Book
          pagePath="readme"
          pageCount={3}
          position={[-0.343, 10.715, 4.323]}
          rotation={[0, 0.072, 0]}
          rotationOffset={bookRotOffset}
          userData={{ name: "DeskBook1" }}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
        />
        <group
          position={[3.926, 10.715, 0.449]}
          rotation={[0, -0.362, 0]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "DeskBook5" }}
        />
        <group
          position={[-5.97, 10.715, 0.498]}
          rotation={[0, 0.351, 0]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "DeskBook3" }}
        />
        <group
          position={[-4.785, 10.715, 4.373]}
          rotation={[0, 1.197, 0]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "DeskBook2" }}
        />
        <group
          position={[6.048, 10.715, 3.78]}
          rotation={[0, -0.718, 0]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "DeskBook4" }}
        />
        <group
          position={[6.947, 14.382, -5.968]}
          rotation={[1.367, -0.02, 0.056]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "WebBook3" }}
        />
        <Book
          pagePath="profisee"
          pageCount={5}
          position={[0.798, 14.373, -4.713]}
          rotation={[1.386, 0.088, -0.479]}
          userData={{ name: "Web Book 1" }}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          rotationOffset={bookRotOffset}
        />
        <group
          position={[4.207, 13.076, -5.03]}
          rotation={[0, -1.258, 0]}
          scale={[0.954, 0.044, 1.377]}
          userData={{ name: "WebBook2" }}
        />
        <mesh
          geometry={nodes.Shelf.geometry}
          material={materials.Standard}
          position={[0.885, 11.511, -5.698]}
          scale={[13.512, 1, 1]}
          userData={{ name: "Shelf" }}
        />
        <Pickup
          overlay={
            <JavaProjects setItemHeld={setItemHeld} itemHeld={itemHeld} />
          }
          position={[8.469, 11.467, 0.901]}
          rotation={[0, -0.298, 0]}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(1, 0, 0),
            Math.PI / 6,
          )}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          userData={{ name: "Coffee" }}
        >
          <mesh
            geometry={nodes.Coffee.geometry}
            material={materials.Standard}
            userData={{ name: "Coffee" }}
          />
        </Pickup>
        <Pickup
          overlay={<ColorChaos />}
          position={[-10.167, 16.065, -4.943]}
          rotation={[1.155, -0.039, 0]}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(1, 0, 0),
            Math.PI / 2,
          )}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          userData={{ name: "ColorChaos" }}
        >
          <mesh
            geometry={nodes.ColorChaos.geometry}
            material={materials.Standard}
          />
        </Pickup>
        <mesh
          geometry={nodes.Desk.geometry}
          material={materials.Standard}
          position={[0, 10.152, 0]}
          scale={[6.748, 0.265, 6.748]}
          userData={{ name: "Desk" }}
        />
        <mesh
          geometry={nodes.Floor.geometry}
          material={materials.Standard}
          scale={96.398}
          userData={{ name: "Floor" }}
        />
        <Pickup
          overlay={<BombFactoryTycoon />}
          position={[-3.619, 15.554, -5.141]}
          rotation={[-0.794, -0.03, 1.611]}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(0, 1, 0),
            Math.PI / 2,
          )}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          userData={{ name: "Bomb" }}
        >
          <mesh geometry={nodes.Bomb.geometry} material={materials.Standard} />
        </Pickup>
        <Pickup
          overlay={<NimGameAI {...{ setItemHeld, itemHeld }} />}
          position={[1.866, 10.723, -5.751]}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(0, 1, 0),
            Math.PI / 2,
          )}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          userData={{ name: "Coins" }}
        >
          <mesh geometry={nodes.Coins.geometry} material={materials.Standard} />
        </Pickup>
        <Pickup
          overlay={<GeorgiaTech {...{ setItemHeld, itemHeld }} />}
          position={[-9.535, 12.299, -5.492]}
          rotation={[1.329, 0.084, -0.326]}
          itemHeld={itemHeld}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(1, 0, 0),
            Math.PI / 2,
          )}
          setItemHeld={setItemHeld}
          userData={{ name: "GT" }}
        >
          <mesh geometry={nodes.GT.geometry} material={materials.Shiny} />
        </Pickup>
        <mesh
          geometry={nodes.Mic.geometry}
          material={materials.Standard}
          position={[-9.833, 12.304, 2.172]}
          rotation={[0, 0.522, 0]}
          userData={{ name: "Mic" }}
        />
        <mesh
          geometry={nodes.Web.geometry}
          material={materials.Standard}
          position={[9.316, 15.591, -5.389]}
          rotation={[-1.217, 0, -0.801]}
          userData={{ name: "Web" }}
        />
        <Pickup
          overlay={<Speech {...{ setItemHeld, itemHeld }} />}
          position={[-3.226, 12.228, -4.529]}
          rotation={[0.189, 0.507, -0.154]}
          rotationOffset={new THREE.Quaternion().setFromAxisAngle(
            new THREE.Vector3(0, 1, 0),
            Math.PI / 6,
          )}
          itemHeld={itemHeld}
          setItemHeld={setItemHeld}
          userData={{ name: "GraduationCap" }}
        >
          <mesh
            geometry={nodes.GraduationCap.geometry}
            material={materials.Standard}
          />
        </Pickup>
      </group>
    </group>
  );
}

useGLTF.preload("/desk.glb");
