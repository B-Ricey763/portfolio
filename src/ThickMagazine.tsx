/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeEvent, useFrame, useThree } from "@react-three/fiber";
import { clamp } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
  nodes: {
    Plane001: THREE.Mesh;
    Plane001_1: THREE.Mesh;
    Plane002: THREE.Mesh;
    Plane002_1: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Scene";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function ThickMagazine(props: JSX.IntrinsicElements["group"]) {
  const minPage = 0;
  const maxPage = 2;
  const [page, setPage] = useState(0);

  const cyclePage = (direction: number) => {
    const newPageNum = clamp(page + direction, minPage, maxPage);
    setPage(newPageNum);
  };

  const group = useRef<THREE.Group>();
  const FRAMES_PER_SEC = 24;
  const PAGE_FLIP_FRAMES = 32;
  const actionRef = useRef<THREE.AnimationAction>();
  const keyframeRef = useRef(0);
  const { nodes, materials, animations } = useGLTF(
    "/ThickMagazine.glb",
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const calcFrame = (pg: number) => {
    return (PAGE_FLIP_FRAMES * pg) / FRAMES_PER_SEC;
  };

  useEffect(() => {
    actions.Scene?.setLoop(THREE.LoopOnce, 1);
    actions.Scene?.play();

    actionRef!.current = actions.Scene ?? undefined;
  }, [actions.Scene]);

  useEffect(() => {
    keyframeRef.current = calcFrame(page);
  }, [page]);

  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === Key)
  }

  useEffect(() => {
    document.addEventListener('keydown', handleKeyDown)

    return () => {
      document.removeEventListener('keydown', handleKeyDown)
    }
  })

  useFrame(() => {
    if (actionRef.current) {
      const diff = actionRef.current.time - keyframeRef.current;
      if (Math.abs(diff) < 0.1) {
        actionRef.current.timeScale = 0;
      } else if (diff > 0) {
        actionRef.current.timeScale = -1;
      } else {
        actionRef.current.timeScale = 1;
      }
    }
  });


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="ThickPage">
          <mesh
            name="Plane001"
            castShadow
            receiveShadow
            geometry={nodes.Plane001.geometry}
            material={materials.Material}
            morphTargetDictionary={nodes.Plane001.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane001.morphTargetInfluences}
          />
          <mesh
            name="Plane001_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane001_1.geometry}
            material={materials["Material.001"]}
            morphTargetDictionary={nodes.Plane001_1.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane001_1.morphTargetInfluences}
          />
        </group>
        <group name="ThickPage001">
          <mesh
            name="Plane002"
            castShadow
            receiveShadow
            geometry={nodes.Plane002.geometry}
            material={materials["Material.005"]}
            morphTargetDictionary={nodes.Plane002.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane002.morphTargetInfluences}
          />
          <mesh
            name="Plane002_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane002_1.geometry}
            material={materials["Material.004"]}
            morphTargetDictionary={nodes.Plane002_1.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane002_1.morphTargetInfluences}
          />
        </group>
        <group
          name="DeformAxis"
          rotation={[Math.PI / 2, 0, 0]}
          scale={[1.36, 1.239, 1]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/ThickMagazine.glb");
