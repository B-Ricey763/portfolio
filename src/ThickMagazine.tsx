/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeEvent, useFrame, useThree } from "@react-three/fiber";
import { clamp } from "three/src/math/MathUtils.js";

type GLTFResult = GLTF & {
  nodes: {
    Plane002: THREE.Mesh;
    Plane002_1: THREE.Mesh;
    Plane005: THREE.Mesh;
    Plane005_1: THREE.Mesh;
    Plane006: THREE.Mesh;
    Plane006_1: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Scene";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function ThickMagazine(props: JSX.IntrinsicElements["group"]) {
  const minPage = 0;
  const maxPage = 3;
  const [page, setPage] = useState(0);
  // Test texture
  const checkerTexture = useTexture("checker.png");
  checkerTexture.wrapS = THREE.RepeatWrapping;
  checkerTexture.wrapT = THREE.RepeatWrapping;
  checkerTexture.magFilter = THREE.NearestFilter;
  checkerTexture.colorSpace = THREE.SRGBColorSpace;
  checkerTexture.repeat.set(4, 4);

  const coverTexture = useTexture("TestPages/Cover.png");
  coverTexture.center = new THREE.Vector2(0.5, 0.5);
  coverTexture.rotation = Math.PI;
  coverTexture.repeat.x = -1;

  const page1Texture = useTexture("TestPages/Page1.png");
  page1Texture.center = new THREE.Vector2(0.5, 0.5);
  page1Texture.rotation = Math.PI;

  const page2Texture = useTexture("TestPages/Page2.png");
  page2Texture.center = new THREE.Vector2(0.5, 0.5);
  page2Texture.rotation = Math.PI;
  page2Texture.repeat.x = -1;

  const cyclePage = (direction: number) => {
    const newPageNum = clamp(page + direction, minPage, maxPage);
    setPage(newPageNum);
  };

  const group = useRef<THREE.Group>();
  const FRAMES_PER_SEC = 24;
  const PAGE_FLIP_FRAMES = 30;
  const actionRef = useRef<THREE.AnimationAction>();
  const keyframeRef = useRef(0);
  const { nodes, materials, animations } = useGLTF(
    "/ThickMagazine.glb",
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const calcFrame = (pg: number) => {
    return (PAGE_FLIP_FRAMES * pg) / FRAMES_PER_SEC;
  };

  useEffect(() => {
    actions.Test?.setLoop(THREE.LoopOnce, 1);
    actions.Test?.play();

    actionRef!.current = actions.Test ?? undefined;
  }, [actions.Test]);

  useEffect(() => {
    keyframeRef.current = calcFrame(page);
  }, [page]);

  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === "q") {
      cyclePage(-1);
    } else if (e.key === "e") {
      cyclePage(1);
    } else if (e.key === "Enter") {
      window.open("https://github.com/B-Ricey763/portfolio");
    }
  };

  useEffect(() => {
    document.addEventListener("keydown", handleKeyDown);

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  });

  useFrame(() => {
    if (actionRef.current) {
      const diff = actionRef.current.time - keyframeRef.current;
      if (Math.abs(diff) < 0.1) {
        actionRef.current.timeScale = 0;
      } else if (diff > 0) {
        actionRef.current.timeScale = -1;
      } else {
        actionRef.current.timeScale = 1;
      }
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Sheet1" position={[0, 0.02, 0]}>
          <mesh
            name="Plane002"
            castShadow
            receiveShadow
            geometry={nodes.Plane002.geometry}
            material={new THREE.MeshStandardMaterial({ map: coverTexture })}
            morphTargetDictionary={nodes.Plane002.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane002.morphTargetInfluences}
          />
          <mesh
            name="Plane002_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane002_1.geometry}
            material={new THREE.MeshStandardMaterial({ map: page1Texture })}
            morphTargetDictionary={nodes.Plane002_1.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane002_1.morphTargetInfluences}
          />
        </group>
        <group name="Sheet2" position={[0, 0.01, 0]}>
          <mesh
            name="Plane005"
            castShadow
            receiveShadow
            geometry={nodes.Plane005.geometry}
            material={new THREE.MeshStandardMaterial({ map: page2Texture })}
            morphTargetDictionary={nodes.Plane005.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane005.morphTargetInfluences}
          />
          <mesh
            name="Plane005_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane005_1.geometry}
            material={materials["Material.001"]}
            morphTargetDictionary={nodes.Plane005_1.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane005_1.morphTargetInfluences}
          />
        </group>
        <group name="Sheet3">
          <mesh
            name="Plane006"
            castShadow
            receiveShadow
            geometry={nodes.Plane006.geometry}
            material={materials.Material}
            morphTargetDictionary={nodes.Plane006.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane006.morphTargetInfluences}
          />
          <mesh
            name="Plane006_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane006_1.geometry}
            material={materials["Material.001"]}
            morphTargetDictionary={nodes.Plane006_1.morphTargetDictionary}
            morphTargetInfluences={nodes.Plane006_1.morphTargetInfluences}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/ThickMagazine.glb");
